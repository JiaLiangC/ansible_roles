#- name: cp project packet to docker workdir
#  local_action:
#    module: copy
#      src: "{{item.src}}" 
#      dest: "{{item.dest}}" 
#      owner: "{{item.owner}}" 
#      group: "{{item.group}}"
#      mode: "{{item.mode}}"
#  with_items:
#    - src: '{{ PACKET_NAME.stdout }}'
#      dest: '{{project_install_dir}}/'
#      owner: '{{project_run_user}}'
#      group: '{{project_run_group}}'
#      mode: "0644"
#  register: cp_result
#
#- name: update project packet link file
#  file: src={{item.src}} dest={{item.dest}} owner={{item.owner}} group={{item.group}} state={{item.state}}
#  with_items:
#    - {src: '{{project_install_dir}}/{{PACKET_NAME.stdout.split("/")[-1]}}', dest: '{{project_install_dir}}/{{project_packet_link_name}}', owner: '{{project_run_user}}', group: '{{project_run_group}}', state: hard }
#  when: project_packet_link_name is defined and PACKET_NAME.stdout.split("/")[-1] != project_packet_link_name


- name: copy docker_build.sh file
  template:
    src: '{{item}}' 
    #dest: '{{project_install_dir}}/{{item.dest}}'
    dest: '{{project_install_dir}}/{{item | basename}}'
    owner: '{{project_run_user}}'
    group: '{{project_run_group}}'
    mode: '0644'
  with_items:
    - '{{project_docker_build_script}}'
    - '{{project_docker_file}}'
    #- src: '{{project_docker_build_script}}' 
    #  dest: '{{project_docker_build_script | basename}}'
    #- src: '{{project_docker_file}}'
    #  dest: '{{project_docker_file | basename}}'
  when: item is not none

- name: update docker image
  local_action: shell /bin/bash {{project_install_dir}}/{{project_docker_build_script|basename}} {{project_prog_name}} 
  when: cp_result.changed == true or unarchive_result.changed == true
  register: PROJECT_IMAGE

