
- name: create docker group
  group: 
    name: '{{docker_run_group}}' 
    state: present

- name: create docker dir
  file: path={{ item.path }} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }} state={{ item.state }}
  with_items:
    - { path: "{{app_base_dir}}", owner: root, group: root, mode: "0755", state: directory }
    - { path: "{{docker_data_dir}}", owner: root, group: root, mode: "0755", state: directory }
    - { path: "{{docker_conf_dir}}", owner: root, group: root, mode: "0755", state: directory }

- name: debug ansible_os_family
  debug:
    var: item
  with_items:
    - '{{ansible_os_family}}'
    - '{{docker_install_method}}'

- include: copy_docker_conf_file_for_suse.yml
  tags:
    - copy_docker_conf_file_for_suse
  when: ansible_os_family == "Suse" and docker_install_method == 'local'

- include: copy_docker_conf_file_for_centos.yml
  tags:
    - copy_docker_conf_file_for_centos
  when: ansible_os_family == "RedHat" and docker_install_method == 'local'


- name: get docker packet dir name
  local_action: shell tar tvf {{docker_packet}} |tail -n 1 |awk '{print $NF}' |awk -F'/' '{print $1}'
  register: docker_dir_name
  run_once: true

- name: install docker
  unarchive: src={{ item.src }} dest={{ item.dest }} owner={{ item.owner }} group={{ item.group }} creates={{ item.creates }}
  with_items:
    - {src: '{{ docker_packet }}', dest: '{{app_base_dir}}/', owner: root, group: root, creates: '{{app_base_dir}}/{{docker_dir_name.stdout}}'}

- name: create docker link dir
  file: src={{ item.src }} dest={{item.dest}} state={{ item.state }}
  with_items:
    - { src: "{{app_base_dir}}/{{docker_dir_name.stdout}}", dest: "{{docker_base_dir}}", state: link}
  when: docker_dir_name.stdout != "docker"


- name: reload systemd  
  shell: systemctl daemon-reload
- name: start docker service 
  service: name=docker state=started enabled=yes
